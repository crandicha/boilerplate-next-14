import type { Metadata, Viewport } from 'next'
import { Inter } from 'next/font/google'

import ReactQueryClientProvider from 'components/ReactQueryClientProvider'

import { BASE_URL } from 'configs/env'
import { ICON_SIZES } from 'configs/icon'

import './globals.scss'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: {
    template: '%s | Boilerplate Next 14',
    default: 'Boilerplate Next 14',
  },
  description: 'Generated by create next app',
  generator: 'Next.js',
  manifest: '/manifest.json',
  authors: [
    {
      name: 'Charles Randicha Gunawan Santoso',
      url: 'https://randicha.dev',
    },
  ],
  icons: [
    ...ICON_SIZES.map((size) => ({
      url: `${BASE_URL}/images/icons/icon-${size}x${size}.png`,
      sizes: `${size}x${size}`,
      rel: 'apple-touch-icon',
    })),
    ...ICON_SIZES.map((size) => ({
      url: `${BASE_URL}/images/icons/icon-${size}x${size}.png`,
      sizes: `${size}x${size}`,
      rel: 'icon',
      type: 'image/png',
    })),
  ],
  robots: 'index, follow',
  // this disables the error about openGraph metadatabase using localhost:3000
  ...(process.env.NODE_ENV === 'production' && {
    openGraph: {
      type: 'website',
      title: 'Boilerplate Next 14',
      description: 'Generated by create next app',
      siteName: 'Boilerplate Next 14',
      url: BASE_URL,
      images: [
        {
          url: `${BASE_URL}/images/icons/icon-192x192.png`,
          width: 384,
          height: 384,
          alt: 'Boilerplate Next 14',
        },
      ],
    },
  }),
}

export const viewport: Viewport = {
  themeColor: '#ffffff',
  width: 'device-width',
  initialScale: 1,
  minimumScale: 1,
  userScalable: true,
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <ReactQueryClientProvider>{children}</ReactQueryClientProvider>
      </body>
    </html>
  )
}
